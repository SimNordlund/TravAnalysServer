#spring.datasource.url=jdbc:mysql://${MYSQL_HOST:localhost}:3306/travanalys
#spring.datasource.username=travanalys_admin
#spring.datasource.password=password

spring.config.import=optional:file:.env[.properties]

spring.datasource.url=${DATABASE_URL}
spring.datasource.username=${DATABASE_USERNAME}
spring.datasource.password=${DATABASE_PASSWORD}
spring.datasource.driverClassName=org.postgresql.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

##spring.jpa.hibernate.ddl-auto=update
##Kan använda denna för att droppa DB i molnet med typ create-drop antar jag?
## Kan också använda truncate i varje tabell i guess. det ska vara update vid DEPLOY!
## Verkar ej fungera med update eller create-drop när vi har två configs för DB. Använd den i config filerna!

secondary.datasource.url=${SECONDARY_DATABASE_URL}
secondary.datasource.username=${SECONDARY_DATABASE_USERNAME}
secondary.datasource.password=${SECONDARY_DATABASE_PASSWORD}
secondary.datasource.driver-class-name=org.postgresql.Driver
secondary.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

##secondary.jpa.hibernate.ddl-auto=update

spring.security.oauth2.client.registration.github.client-id=${CLIENT_ID}
spring.security.oauth2.client.registration.github.client-secret=${CLIENT_SECRET}
spring.security.oauth2.client.registration.github.scope=read:user,user:email

frontend.url=${LOGIN_URL}

spring.security.oauth2.client.registration.google.client-id=${CLIENT_ID_G}
spring.security.oauth2.client.registration.google.client-secret=${CLIENT_SECRET_G}
spring.security.oauth2.client.registration.google.scope=https://www.googleapis.com/auth/userinfo.email

# Ensure cookies work in production
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.same-site=None
