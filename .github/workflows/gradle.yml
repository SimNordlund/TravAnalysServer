name: Docker Image CI with Gradle

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  workflow_dispatch:

env:
  build-number: ${{ github.run_number }}

permissions: write-all

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - uses: actions/checkout@v4
        name: Check out code

      # Step 2: Grant executable permission for Gradle wrapper
      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      # Step 3: Set up JDK 20
      - name: Set up JDK 20
        uses: actions/setup-java@v4
        with:
          java-version: '20'
          distribution: 'temurin'
          cache: gradle

      # Step 4: Build the project using Gradle
      - name: Build with Gradle
        run: ./gradlew clean build

      # Step 5: Set up Docker Buildx (for building Docker images)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 6: Log in to Docker Hub (or GitHub Container Registry)
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 7: Build and push the Docker image to Docker Hub
      - name: Build & push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true  # Set to 'true' to push the image to Docker Hub
          tags: your-dockerhub-username/your-image-name:latest

      # Step 8: Deploy to production (using Render.com or any other service)
      - name: Deploy to production
        uses: johnbeynon/render-deploy-action@v0.0.8
        with:
          service-id: ${{ secrets.MY_RENDER_SERVICE_ID }}
          api-key: ${{ secrets.MY_RENDER_API_KEY }}
          wait-for-success: false
